#! /usr/bin/env python

from __future__ import print_function, division
from distutils.core import setup
from distutils.extension import Extension
from glob import glob

## Extension definition
import os.path
incdir1 = os.path.abspath("@abs_top_srcdir@/include")
incdir2 = os.path.abspath("@abs_top_builddir@/include")
incdir3 = os.path.abspath("@abs_srcdir@/yoda")
incdir4 = os.path.abspath("@abs_builddir@/yoda")

srcdir = os.path.abspath("@abs_top_srcdir@/src")
libdir = os.path.abspath("@abs_top_builddir@/src/.libs")
static_files = ["yoda/errors.cpp"]

BASE_COMPILE_ARGS = "@PYEXT_CXXFLAGS@".split()

if "YODA_LOCAL" in os.environ:
    BASE_LINK_ARGS = ["-L@abs_top_builddir@/src/.libs"]
else:
    BASE_LINK_ARGS = ["-L@prefix@/lib"]


## Dependencies used to trigger rebuild
# couldn't get it to work reliably, use --force in Makefile.am
# to always rebuild
#header_files = glob(incdir+"/YODA/*.h") + glob(incdir+"/YODA/Utils/*.h")
#core_depends = glob("yoda/include/*.pyx") + glob("yoda/*.py")# + header_files


## Helper function
def ext(name, depends=[], statics=[], extra_compile_args=[], extra_link_args=[]):

    fullname = '@abs_builddir@/yoda/%s.cpp' % name
    if not os.path.isfile(fullname): # distcheck has it in srcdir
        fullname = os.path.relpath("@abs_srcdir@/yoda/%s.cpp" % name)

    return Extension(
        "yoda.%s" % name,
        [fullname] + statics,
        language="c++",
 #        depends=depends,
        include_dirs=[incdir1, incdir2, incdir3, incdir4],
        extra_compile_args=BASE_COMPILE_ARGS + extra_compile_args,
        library_dirs=[libdir],
        extra_link_args = BASE_LINK_ARGS + extra_link_args,
        libraries=["stdc++", "YODA"])

extns = [ext("util"),
         ext("core", statics=static_files)]#,depends=core_depends)]

## Enable building of ROOT extension if ROOT is present
if "BUILD_ROOTCOMPAT" in os.environ:
    try:
        # import ROOT
        # rootversion = ROOT.gROOT.GetVersionInt() // 100
        # TODO: Need to test for and use root-config in configure
        root_ext = ext("rootcompat", #depends=core_depends,
                       extra_compile_args="@ROOT_CXXFLAGS@".split(),
                       extra_link_args= "@ROOT_LDFLAGS@ @ROOT_LIBS@".split())
        extns.append(root_ext)
    except:
        pass

setup(name="yoda",
      version="@PACKAGE_VERSION@",
      ext_modules=extns,
      packages=["yoda", "yoda1"])
